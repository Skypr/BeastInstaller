<electionDescription>
<name>
new_election
</name>
<votingDecLine>
2
</votingDecLine>
<code>
//Single-choice: W?hler stimmt jeweils f?r einen Kandidaten
//Single-choice: Ein gew?hlter Kandidat oder unentschieden
unsigned int  voting(unsigned int votes[V]) { 
    unsigned int res[C + 1];
    unsigned int i = 0;

    for (i = 0; i <= C; i++) {
        res[i] = 0;
    }
    for (i = 0; i < V; i++) {
        res[votes[i]]++;
    }
    unsigned int max = 0;
    unsigned int elect = 0;
    for (i = 0; i < C; i++) {
        if (max < res[i]) {
            max = res[i];
            elect = i;
        } else {
            if (max == res[i]) {
                elect = C;
            }
        }
    }
    return elect;
} 

</code>
<inputType>
one_candidate_per_voter
</inputType>
<outputType>
one_candidate_or_zero
</outputType>

</electionDescription>
<propertyList>
<propertyItem>
<postAndPreProps>
<name>
Anonymity
</name>
<pre>
FOR_ALL_VOTERS(i) : ((v!=i && i != w ) ==> VOTES1(i) == VOTES2(i)) ;
VOTES1(v) == c && VOTES2(w) == d;
VOTES2(v) == d && VOTES2(w) == c;
</pre>
<post>
ELECT1 == ELECT2;
</post>
<varlist>
symbolic_variable: id: w type: VOTER;
symbolic_variable: id: v type: VOTER;
symbolic_variable: id: d type: CANDIDATE;
symbolic_variable: id: c type: CANDIDATE;

</varlist>

</postAndPreProps>
<testStatus>
true
</testStatus>

</propertyItem>

</propertyList>
<electionCheckParameter>
<amountVotersMin>
5
</amountVotersMin>
<amountVotersMax>
5
</amountVotersMax>
<amountCandidatesMin>
5
</amountCandidatesMin>
<amountCandidatesMax>
5
</amountCandidatesMax>
<amountSeatsMin>
5
</amountSeatsMin>
<amountSeatsMax>
5
</amountSeatsMax>
<timeout>
<duration>
300000
</duration>
<timeunit
>MINUTES
</timeunit>

</timeout>
<processes>
4
</processes>
<argument>

</argument>

</electionCheckParameter>
